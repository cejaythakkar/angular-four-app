1) defining a model class (ts file only)

	export class Article{
	    title : string;
	    link : string;
	    votes : number;
	    constructor(title : string , link : string , votes? : number){
	        this.title = title;
	        this.link = link;
	        this.votes = votes || 0;
	    }
	    upVote():boolean{
	        this.votes += 1;
	    }
	    downVote():boolean{
	        this.votes -= 1;
	    }
	}

	------ SHORTHAND version of doing so ------

	export class Article{
	    constructor(public title : string ,public link : string ,public votes? : number){
	        this.title = title;
	        this.link = link;
	        this.votes = votes || 0;
	    }
	    upVote():boolean{
	        this.votes += 1;
	        return false;
	    }
	    downVote():boolean{
	        this.votes -= 1;
	        return false;
	    }
	}

******Property binding ( [property] )


Write a template property binding to set a property of a view element. The binding sets the property to the value of a template expression.

The most common property binding sets an element property to a component property value. An example is binding the src property of an image element to a component's heroImageUrl property:

****** Attribute, class, and style bindings

Attribute binding
You can set the value of an attribute directly with an attribute binding.

You must use attribute binding when there is no element property to bind.

Consider the ARIA, SVG, and table span attributes. They are pure attributes.
They do not correspond to element properties, and they do not set element properties.
There are no property targets to bind to.

This fact becomes painfully obvious when you write something like this.

<tr><td colspan="{{1 + 1}}">Three-Four</td></tr>
And you get this error:
Template parse errors:
Can't bind to 'colspan' since it isn't a known native property

As the message says, the <td> element does not have a colspan property. It has the "colspan" attribute,
but interpolation and property binding can set only properties, not attributes.

Attribute binding syntax resembles property binding. Instead of an element property between brackets,
start with the prefix attr, followed by a dot (.) and the name of the attribute.
You then set the attribute value, using an expression that resolves to a string.

Bind [attr.colspan] to a calculated value:

<table border=1>
  <!--  expression calculates colspan=2 -->
  <tr><td [attr.colspan]="1 + 1">One-Two</td></tr>

  <!-- ERROR: There is no `colspan` property to set!
    <tr><td colspan="{{1 + 1}}">Three-Four</td></tr>
  -->

  <tr><td>Five</td><td>Six</td></tr>
</table>

******Class binding

You can add and remove CSS class names from an element's class attribute with a class binding.

Class binding syntax resembles property binding. Instead of an element property between brackets, start with the prefix class,
 optionally followed by a dot (.) and the name of a CSS class: [class.class-name].

 <!-- standard class attribute setting  -->
<div class="bad curly special">Bad curly special</div>

You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.

<!-- reset/override all class names with a binding  -->
<div class="bad curly special"
     [class]="badCurly">Bad curly</div>

Finally, you can bind to a specific class name.
 Angular adds the class when the template expression evaluates to truthy.
 It removes the class when the expression is falsy.

 <!-- toggle the "special" class on/off with a property -->
<div [class.special]="isSpecial">The class binding is special</div>

<!-- binding to `class.special` trumps the class attribute -->
<div class="special"
     [class.special]="!isSpecial">This one is not so special</div>

******Style binding
You can set inline styles with a style binding.

Style binding syntax resembles property binding. Instead of an element property between brackets,
start with the prefix style,
followed by a dot (.) and the name of a CSS style property: [style.style-property].

<button [style.color]="isSpecial ? 'red': 'green'">Red</button>
<button [style.background-color]="canSave ? 'cyan': 'grey'" >Save</button>

Some style binding styles have a unit extension.
The following example conditionally sets the font size in “em” and “%” units .

<button [style.font-size.em]="isSpecial ? 3 : 1" >Big</button>
<button [style.font-size.%]="!isSpecial ? 150 : 50" >Small</button>

------------------------------------------------------------
template expression

the text between the braces is a template expression that Angular first evaluates and then converts to a string. The following interpolation illustrates the point by adding the two numbers:

<p>The sum of 1 + 1 is {{1 + 1}}</p>

The expression can invoke methods of the host component such as getVal(), seen here:

<p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}</p>

[property]="expression".

JavaScript expressions that have or promote side effects are prohibited, including:

assignments (=, +=, -=, ...)
new
chaining expressions with ; or ,
increment and decrement operators (++ and --)
Other notable differences from JavaScript syntax include:

no support for the bitwise operators | and &
new template expression operators, such as |, ?. and !


expression context

template's context such as a template input variable (let hero) or a template reference variable (#heroInput).


Template statements

A template statement responds to an event raised by a binding target such as an element, component, or directive. You'll see template statements in the event binding section, appearing in quotes to the right of the = symbol as in (event)="statement".

<button (click)="deleteHero()">Delete hero</button>

Like template expressions, template statements use a language that looks like JavaScript. The template statement parser differs from the template expression parser and specifically supports both basic assignment (=) and chaining expressions (with ; or ,).

However, certain JavaScript syntax is not allowed:

new
increment and decrement operators, ++ and --
operator assignment, such as += and -=
the bitwise operators | and &
the template expression operators


Statement context
The statement context may also refer to properties of the template's own context. In the following examples, the template $event object, a template input variable (let hero), and a template reference variable (#heroForm) are passed to an event handling method of the component.

<button (click)="onSave($event)">Save</button>
<button *ngFor="let hero of heroes" (click)="deleteHero(hero)">{{hero.name}}</button>
<form #heroForm (ngSubmit)="onSubmit(heroForm)"> ... </form>

Template statements cannot refer to anything in the global namespace. They can't refer to window or document. They can't call console.log or Math.max